// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  handle        String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  phone         String?   @unique
  phoneVerified DateTime? @map("phone_verified")
  image         String?

  accounts      Account[]
  sessions      Session[]
  createdGroups Group[]
  memberships   GroupMember[]
  sentMessages  Message[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MessageDelivery MessageDelivery[]
  sentInvites     Invite[]          @relation("InviteSender")
  acceptedInvite  Invite?           @relation("InviteAcceptor")

  sentSystemMessages    SystemMessage[]
  SystemMessageDelivery SystemMessageDelivery[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  createdAt DateTime @default(now())

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Group {
  id          String  @id @default(cuid())
  handle      String  @unique
  name        String  @unique
  description String?
  icon        String?

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  members       GroupMember[]
  messages      Message[]
  invites       Invite[]
  SystemMessage SystemMessage[]

  @@map("groups")
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

model GroupMember {
  id      String    @id @default(cuid())
  groupId String
  userId  String
  role    GroupRole @default(MEMBER)

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([groupId, userId])
  @@map("group_members")
}

model Message {
  id      String  @id @default(cuid())
  groupId String
  userId  String
  title   String?
  content String  @db.Text

  repliesToMessageId String?
  replyingToMessage  Message?  @relation("ReplyHistory", fields: [repliesToMessageId], references: [id])
  replyMessages      Message[] @relation("ReplyHistory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group       Group               @relation(fields: [groupId], references: [id])
  user        User                @relation(fields: [userId], references: [id])
  attachments MessageAttachment[]
  deliveries  MessageDelivery[]

  @@map("messages")
}

enum SystemMessageType {
  WELCOME_TO_GROUP
  THANKS_FOR_CREATING_GROUP
  REMOVED_FROM_GROUP
}

model SystemMessage {
  id      String            @id @default(cuid())
  groupId String
  userId  String
  title   String?
  content String            @db.Text
  type    SystemMessageType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group       Group                     @relation(fields: [groupId], references: [id])
  user        User                      @relation(fields: [userId], references: [id])
  attachments SystemMessageAttachment[]
  deliveries  SystemMessageDelivery[]

  @@map("system_messages")
}

model SystemMessageAttachment {
  id        String @id @default(cuid())
  messageId String
  url       String
  type      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message SystemMessage @relation(fields: [messageId], references: [id])

  @@map("system_message_attachments")
}

model SystemMessageDelivery {
  id              String    @id @default(cuid())
  messageId       String
  userId          String
  sentAt          DateTime?
  senderAttemptAt DateTime? // The time the sender "checked out" the message to send

  message SystemMessage @relation(fields: [messageId], references: [id])
  user    User          @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_message_deliveries")
}

model MessageAttachment {
  id        String @id @default(cuid())
  messageId String
  url       String
  type      String

  systemGenerated       Boolean @default(false)
  systemGeneratedSource String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message Message @relation(fields: [messageId], references: [id])

  @@map("message_attachments")
}

model MessageDelivery {
  id              String    @id @default(cuid())
  messageId       String
  userId          String
  sentAt          DateTime?
  senderAttemptAt DateTime? // The time the sender "checked out" the message to send

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("message_deliveries")
}

enum InviteType {
  EMAIL
  PHONE
}

model Invite {
  id               String     @id @default(cuid())
  inviteType       InviteType
  groupId          String
  role             GroupRole  @default(MEMBER)
  name             String
  phone            String?
  email            String?
  code             String     @default(cuid())
  invitedByUserId  String
  acceptedByUserId String?    @unique

  group      Group @relation(fields: [groupId], references: [id])
  invitedBy  User  @relation("InviteSender", fields: [invitedByUserId], references: [id])
  acceptedBy User? @relation("InviteAcceptor", fields: [acceptedByUserId], references: [id])

  lastSentAt DateTime?
  acceptedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invites")
}
